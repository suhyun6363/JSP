/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-04-26 07:09:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jQImageForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\"/>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>jQuery 테스트3</title>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("  div#result {\r\n");
      out.write("    width : 200px;\r\n");
      out.write("    height : 300px;\r\n");
      out.write("    border : 5px double #6699FF;\r\n");
      out.write("    background-color : white;\r\n");
      out.write("  }\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.4.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("  $(document).ready(function() {\r\n");
      out.write("	  $(\"#b1\").click(function() {\r\n");
      out.write("		  const image = $(\"#image\")[0];	//다중 선택이 가능하기 때문에 배열로 생성-> 사진 한개 인덱스 0\r\n");
      out.write("		  //파일을 여러 개 선택할 수 있으므로 files라는 객체에 담긴다\r\n");
      out.write("		  if(image.files.length === 0) { //사용자가 파일을 하나도 선택하지 않고 버튼 누름\r\n");
      out.write("			  alert(\"파일을 선택해주세요\");\r\n");
      out.write("			  return;\r\n");
      out.write("		  }\r\n");
      out.write("		  \r\n");
      out.write("		  const formData = new FormData(); //변수명 값을 넘기는 프로그램을 객체화함\r\n");
      out.write("		  formData.append(\"name\", $(\"#t1\").val())\r\n");
      out.write("		  formData.append(\"sid\", $(\"#t2\").val())\r\n");
      out.write("		  formData.append(\"image\", image.files[0]);\r\n");
      out.write("		  //javascript내 formData 클래스 존재\r\n");
      out.write("		  \r\n");
      out.write("		  $.ajax({		// ajax: 서버 통신 함수(html form태그랑 유사) //아래 파라미터들을 여러 개 함		//요청페이지와 같은 페이지에 결과를 보여주기 위함\r\n");
      out.write("			  type: \"post\",\r\n");
      out.write("			  url: \"jQImagePro.jsp\",\r\n");
      out.write("			  processData: false,	// 텍스트, 바이너리 data 인 multipart request data를 보내는 것이기 때문에 정렬/구분 작업(딕셔너리 형태)하지 말고 그대로 보냄 		//default: True\r\n");
      out.write("			  contentType: false,	// 텍스트뿐이 아닌 multipart로 보내기 때문 			//default: True\r\n");
      out.write("			  data: formData,  //formData 객체를 보냄\r\n");
      out.write("			  success: function(data) {	// success했을 때 어떤 형식으로 결과를 내보내는지 보여주는 파라미터\r\n");
      out.write("				  $(\"#result\").html(data);\r\n");
      out.write("				  alert(\"로드성공\");\r\n");
      out.write("			  },\r\n");
      out.write("			  error: function() {\r\n");
      out.write("				  alert(\"로드실패\");\r\n");
      out.write("			  }\r\n");
      out.write("		  });\r\n");
      out.write("	  });\r\n");
      out.write("  });\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	이름: <input type=\"text\" id=\"t1\" size=\"5\">\r\n");
      out.write("	학번: <input type=\"text\" id=\"t2\" size=\"5\"></p>\r\n");
      out.write("	<input type=\"file\" id=\"image\">\r\n");
      out.write("	<button id=\"b1\">전송</button>\r\n");
      out.write("	<div id=\"result\">로딩 영역</div>	\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
